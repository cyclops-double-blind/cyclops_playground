#!/bin/bash
base_directory=$(realpath $(dirname "$BASH_SOURCE")/..)
dataset_directory="$base_directory/dataset"

asl_dataset_base_url="\
  http://robotics.ethz.ch/~asl-datasets/ijrr_euroc_mav_dataset/machine_hall"
sequences=(MH_01_easy MH_02_easy MH_03_medium MH_04_difficult MH_05_difficult)

function sequence_basename() {
  echo "${1:0:5}"
}

function sequence_basepath() {
  echo "$dataset_directory/$(sequence_basename $1)"
}

function path_exists() {
  if [ -d "$1" ] || [ -f "$1" ]; then
    return 0
  else
    return 1
  fi
}

function sequence_bag_all_exist() {
  for sequence in ${sequences[@]}; do
    if ! path_exists "$(sequence_basepath $sequence).bag"; then
      return 1
    fi
  done

  return 0
}

function download_sequences() {
  local original_sigint=$(trap -p SIGINT)
  local original_sigterm=$(trap -p SIGTERM)

  download_sequences=()
  download_pid=()

  trap download_sequences__cleanup SIGINT SIGTERM
  download_sequences__download_and_wait

  eval "$original_sigint"
  eval "$original_sigterm"
}

function download_sequences__cleanup() {
  for pid in "${download_pid[@]}"; do
    if kill -0 $pid 2>/dev/null; then
      kill -TERM $pid
      wait $pid
    fi
  done

  for sequence in "${download_sequences[@]}"; do
    rm $(sequence_basepath $sequence).zip
    rm $(sequence_basepath $sequence).zip.log
  done

  exit 1
}

function download_sequences__download_and_wait() {
  for sequence in ${sequences[@]}; do
    local sequence_url=$asl_dataset_base_url/$sequence/$sequence.zip
    local basepath="$(sequence_basepath $sequence)"

    if ! path_exists "$basepath.bag" && ! path_exists "$basepath.zip"; then
      wget -O "$basepath.zip" -o "$basepath.zip.log" $sequence_url &
      download_pid+=($!)
      download_sequences+=("$sequence")
    fi
  done

  if [ ${#download_sequences[@]} -ne 0 ]; then
    echo "Downloading EuroC-MAV dataset sequences: ${download_sequences[@]}."
    echo "Monitor $dataset_directory/MH_*.zip.log to watch the progress"
  else
    echo "No dataset sequences need to be newly downloaded."
  fi

  for pid in ${download_pid[@]}; do
    wait $pid
  done
}

function compile_sequences() {
  for sequence in ${sequences[@]}; do
    basepath=$(sequence_basepath $sequence)

    if path_exists $basepath.bag; then
      continue
    fi

    if ! path_exists $basepath; then
      unzip -d $basepath $basepath.zip || exit 1
    fi
    python $base_directory/tools/compile_dataset.py \
      -o $basepath.bag -d $basepath/mav0 || exit 1
  done
}

function cleanup() {
  cleanup_files=()

  for sequence in ${sequences[@]}; do
    basepath="$(sequence_basepath $sequence)"

    if path_exists "$basepath"; then
      cleanup_files+=("$basepath")
    fi
    if path_exists "$basepath.zip"; then
      cleanup_files+=("$basepath.zip")
    fi
    if path_exists "$basepath.zip.log"; then
      cleanup_files+=("$basepath.zip.log")
    fi
  done

  if [ ${#cleanup_files[@]} -eq 0 ]; then
    return 0;
  fi

  echo "Cleanup temporary files? (Y/N)"
  read -r response

  response=$(echo "$response" | tr '[:upper:]' '[:lower:]')

  case "$response" in
    y)
      echo "Cleaning up temporary files..."
      for cleanup_file in "${cleanup_files[@]}"; do
        rm -rf $cleanup_file
      done
      ;;
    n)
      echo "Skipping cleanup."
      ;;
    *)
      echo "Invalid response. Please answer 'Y' or 'N' (case insensitive)."
      ;;
  esac
}

if sequence_bag_all_exist; then
  echo "Sequence bags already exist. Nothing needs to be done."
else
  download_sequences
  compile_sequences
fi

cleanup
